// <auto-generated />
using System;
using Experiment4.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Experiment4.Migrations
{
    [DbContext(typeof(AppDbcontext))]
    [Migration("20220324032704_inital6")]
    partial class inital6
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.23")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Experiment4.Models.CYCompany", b =>
                {
                    b.Property<int>("CYId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CreditCode")
                        .HasColumnType("int");

                    b.Property<string>("FirmPhone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CYId");

                    b.ToTable("CYCompany");
                });

            modelBuilder.Entity("Experiment4.Models.CYManagement", b =>
                {
                    b.Property<Guid>("CYNumber")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("CYId")
                        .HasColumnType("int");

                    b.Property<string>("Phone")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("CYNumber");

                    b.HasIndex("CYId")
                        .IsUnique();

                    b.HasIndex("Phone");

                    b.ToTable("CYManagement");
                });

            modelBuilder.Entity("Experiment4.Models.Employee", b =>
                {
                    b.Property<string>("Phone")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("IdCard")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Sex")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Phone");

                    b.ToTable("Employee");
                });

            modelBuilder.Entity("Experiment4.Models.FHManagement", b =>
                {
                    b.Property<Guid>("FHNumber")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("FhId")
                        .HasColumnType("int");

                    b.Property<int>("HFId")
                        .HasColumnType("int");

                    b.Property<string>("Phone")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("FHNumber");

                    b.HasIndex("FhId");

                    b.HasIndex("Phone");

                    b.ToTable("FHManagement");
                });

            modelBuilder.Entity("Experiment4.Models.FhCompany", b =>
                {
                    b.Property<int>("FhId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreditCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirmPhone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("FhId");

                    b.ToTable("FhCompany");
                });

            modelBuilder.Entity("Experiment4.Models.Project", b =>
                {
                    b.Property<int>("ProjectId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CYId")
                        .HasColumnType("int");

                    b.Property<string>("Phone")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProjectName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TZFId")
                        .HasColumnType("int");

                    b.HasKey("ProjectId");

                    b.HasIndex("CYId")
                        .IsUnique();

                    b.HasIndex("Phone")
                        .IsUnique()
                        .HasFilter("[Phone] IS NOT NULL");

                    b.HasIndex("TZFId")
                        .IsUnique();

                    b.ToTable("Project");
                });

            modelBuilder.Entity("Experiment4.Models.TZF", b =>
                {
                    b.Property<int>("TZFId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TZFPhone")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("TZFId");

                    b.ToTable("TZF");
                });

            modelBuilder.Entity("Experiment4.Models.CYManagement", b =>
                {
                    b.HasOne("Experiment4.Models.CYCompany", "CYCompany")
                        .WithOne("CYManagement")
                        .HasForeignKey("Experiment4.Models.CYManagement", "CYId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Experiment4.Models.Employee", "Employee")
                        .WithMany("CYManagement")
                        .HasForeignKey("Phone");
                });

            modelBuilder.Entity("Experiment4.Models.FHManagement", b =>
                {
                    b.HasOne("Experiment4.Models.FhCompany", "FhCompany")
                        .WithMany()
                        .HasForeignKey("FhId");

                    b.HasOne("Experiment4.Models.Employee", "Employee")
                        .WithMany("FHManagement")
                        .HasForeignKey("Phone");
                });

            modelBuilder.Entity("Experiment4.Models.Project", b =>
                {
                    b.HasOne("Experiment4.Models.CYCompany", "CyCompany")
                        .WithOne("Project")
                        .HasForeignKey("Experiment4.Models.Project", "CYId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Experiment4.Models.Employee", "Employee")
                        .WithOne("Project")
                        .HasForeignKey("Experiment4.Models.Project", "Phone");

                    b.HasOne("Experiment4.Models.TZF", "TZF")
                        .WithOne("Project")
                        .HasForeignKey("Experiment4.Models.Project", "TZFId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
